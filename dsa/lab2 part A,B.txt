// part A
//prb.1 matrix add

#include <stdio.h>
int main() {
    int m, n;
    printf("Enter rows and columns: ");
    scanf("%d %d", &m, &n);

    int A[m][n], B[m][n], C[m][n];

    printf("Enter Matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    printf("Enter Matrix B:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    printf("Sum Matrix C = A + B:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }
    return 0;
}





// prb.2  Matrix Multiplication

#include <stdio.h>
int main() {
    int m, p, n;
    printf("Enter rows of A, columns of A / rows of B, columns of B: ");
    scanf("%d %d %d", &m, &p, &n);

    int A[m][p], B[p][n], C[m][n];

    printf("Enter Matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < p; j++)
            scanf("%d", &A[i][j]);

    printf("Enter Matrix B:\n");
    for (int i = 0; i < p; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    // Initialize C to zero
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = 0;

    // Multiply
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < p; k++)
                C[i][j] += A[i][k] * B[k][j];

    printf("Product Matrix C = A × B:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", C[i][j]);
        printf("\n");
    }
    return 0;
}



// prb.3 Transpose of a Matrix

#include <stdio.h>
int main() {
    int m, n;
    printf("Enter rows and columns: ");
    scanf("%d %d", &m, &n);

    int A[m][n], T[n][m];

    printf("Enter Matrix A:\n");
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    // Transpose logic
    for (int i = 0; i < m; i++)
        for (int j = 0; j < n; j++)
            T[j][i] = A[i][j];

    printf("Transpose Matrix Aᵀ:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
            printf("%d ", T[i][j]);
        printf("\n");
    }
    return 0;
}





// prb.4 Determinant of a 2x2 Matrix

#include <stdio.h>
int main() {
    int a[2][2];
    printf("Enter elements of 2x2 matrix:\n");
    for(int i = 0; i < 2; i++)
        for(int j = 0; j < 2; j++)
            scanf("%d", &a[i][j]);

    int det = a[0][0]*a[1][1] - a[0][1]*a[1][0];
    printf("Determinant = %d\n", det);
    return 0;
}



//prb.5 Saddle Point of a Matrix

#include <stdio.h>
int main() {
    int m, n;
    printf("Enter rows and columns: ");
    scanf("%d %d", &m, &n);

    int a[m][n];
    printf("Enter matrix:\n");
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            scanf("%d", &a[i][j]);

    printf("Saddle Points:\n");
    for(int i=0;i<m;i++) {
        int min_col = 0;
        for(int j=1;j<n;j++)
            if(a[i][j] < a[i][min_col])
                min_col = j;

        int is_saddle = 1;
        for(int k=0;k<m;k++)
            if(a[k][min_col] > a[i][min_col])
                is_saddle = 0;

        if(is_saddle)
            printf("Saddle Point at (%d,%d): %d\n", i, min_col, a[i][min_col]);
    }

    return 0;
}



// part B 

// prb.6 Traversal of a 3D Array

#include <stdio.h>
int main() {
    int a[2][3][4] = {
        {{1,2,3,4},{5,6,7,8},{9,10,11,12}},
        {{13,14,15,16},{17,18,19,20},{21,22,23,24}}
    };

    printf("Elements layer by layer:\n");
    for(int i=0;i<2;i++) {
        printf("Layer %d:\n", i);
        for(int j=0;j<3;j++) {
            for(int k=0;k<4;k++)
                printf("%d ", a[i][j][k]);
            printf("\n");
        }
        printf("\n");
    }

    return 0;
}


//prb.7 Search in a 3D Array

#include <stdio.h>
int main() {
    int a[3][3][3], val;
    printf("Enter elements of 3x3x3 array:\n");
    for(int i=0;i<3;i++)
        for(int j=0;j<3;j++)
            for(int k=0;k<3;k++)
                scanf("%d", &a[i][j][k]);

    printf("Enter value to search: ");
    scanf("%d", &val);

    printf("Searching...\n");
    int found = 0;
    for(int i=0;i<3;i++)
        for(int j=0;j<3;j++)
            for(int k=0;k<3;k++)
                if(a[i][j][k] == val) {
                    printf("Found at Layer %d, Row %d, Column %d\n", i, j, k);
                    found = 1;
                }

    if(!found)
        printf("Element not found.\n");

    return 0;
}



// prb.8 Sum of All Elements in a 3D Array

#include <stdio.h>
int main() {
    int a[2][2][2], sum = 0;
    printf("Enter elements of 2x2x2 array:\n");
    for(int i=0;i<2;i++)
        for(int j=0;j<2;j++)
            for(int k=0;k<2;k++) {
                scanf("%d", &a[i][j][k]);
                sum += a[i][j][k];
            }

    printf("Sum of all elements = %d\n", sum);
    return 0;
}




